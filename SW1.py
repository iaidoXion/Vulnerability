
import os
result = []
list = []
def do_stuff():
    os.system('secedit /export /cfg .\\test.inf')
    text = open('.\\test.inf', 'rb')
    y = text.read()
    x = y.decode('utf-16')
    #print(x)

    text.close()

    result = x.splitlines()
    for x in result :
        if 'NewAdministratorName' in x: #로컬 정책 > 보안 옵션 > 계정:Administrator 계정 이름 바꾸기(1번)
            list.append(x)
        if 'EnableGuestAccount' in x: #로컬 정책 > 보안 옵션 > 계정:Guest 계정 상태(2번)
            list.append(x)
        if 'LockoutBadCount' in x : #계정 정책 > 계정 잠금 정책 > 계정 잠금 임계값(4번)
            list.append(x)
        if 'ClearTextPassword' in x : #계정 정책 > 암호 정책 > 해독 가능한 암호화를 사용하여 암호 저장(5번)
            list.append(x)
        if 'MACHINE\System\CurrentControlSet\Control\Lsa\EveryoneIncludesAnonymous' in x : #로컬 정책 > 보안 옵션 > 네트워크 액세스:Everyone 사용 권한을 익명 사용자에게 적용(7번)
            list.append(x)
        if 'LockoutDuration' in x : # 계정 잠금 기간 ("8번")
            list.append(x)
        if 'PasswordComplexity' in x : #암호는 복장섭을 만족해야 함 ('9번')
            list.append(x)
        if 'MinimumPasswordLength' in x : #암호 길이 8문자 이상 설정('10번')
            list.append(x)
        if 'MaximumPasswordAge' in x : #계정 정책 > 암호 정책 > 최대 암호 사용 기간(11번)
            list.append(x)
        if 'MinimumPasswordAge' in x : #MinimumPasswordAge = 0  : 계정 정책 > 암호 정책 > 최소 암호 사용 기간(12번)
            list.append(x)
        if 'MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\System\DontDisplayLastUserName' in x : #로컬 정책 > 보안 옵션 > 대화형 로그온:마지막 로그인 사용자 이름 표시 안함.(13번)
            list.append(x)
        if 'SeInteractiveLogonRight' in x : #(14번)
            list.append(x)
        if 'LSAAnonymousNameLookup' in x : #MinimumPasswordAge = 0  : 계정 정책 > 암호 정책 > 최소 암호 사용 기간(15번)
            list.append(x)
        if 'PasswordHistorySize' in x : #MinimumPasswordAge = 0  : 계정 정책 > 암호 정책 > 최근 암호 기억(16번)
            list.append(x)
        if 'MACHINE\System\CurrentControlSet\Control\Lsa\LimitBlankPasswordUse' in x : #로컬 정책 > 보안 옵션 > 계정: 콘솔 로그온 시 로컬 계정에서 빈 암호 사용 제한(17번)
            list.append(x)
        if 'SeRemoteInteractiveLogonRight' in x :
            list.append(x)
    
    cmd = os.popen('net user | find /v "accounts for" ').readlines()
    nline = []
    account_list = []
    result_dict ={}
    for line in cmd :
        if '사용자 계정' in line :
            continue
        elif ('-------------------------') in line :
            continue
        elif ('명령을 잘 실행했습니다.') in line :
            continue
        elif ('하나 이상의') in line :
            continue
        nline.append(line.split('\n')[0].split('  '))
    nline = filter(None, nline)
    for i in nline :
        i = filter(len, i)
        for j in i :
            account_list.append(j.strip())
    account_list = [s for s in account_list if s]
    result_dict['unnecessary account'] = account_list
    list.append(result_dict)

    #1-06
    cmd = os.popen('net localgroup administrators | find /v "명령을 잘 실행"').readlines()
    nline = []
    result = []
    result_dict ={}
    result_dict['SWV'] = 'SW1-06'
    for line in cmd :
        nline.append(line.split('\n')[0])
    for i in nline :
        if '별칭' in i :
            continue
        elif '설명' in i :
            continue
        elif '구성원' in i :
            continue
        elif '----------------' in i :
            continue
        result.append(i)
    result = [s for s in result if s]
    result_dict['localgroup administrators'] = result
    list.append(result_dict)

    # [SW1-20]
    result = []
    final = []
    result_dict ={}
    result_dict['SWV'] = 'SW1-20'
    root = []
    tomcat_root = []
    cmd = os.popen('path').read().strip('PATH=').split(";")
    bool = "False"
    for i in cmd :
        print(i)
        if 'Tomcat' in i :
            root.append(i)
            bool = "True"
        else :
            result_dict['value'] = "Tomcat이 환경변수에 없거나 설치가 안되어있습니다."
    if bool == "True" :
        for i in root :
            if '\\' in i or '/' in i:
                if i.rfind('bin') :
                    tomcat_root.append(i[:i.rfind('bin')])
                else :
                    tomcat_root.append(i.strip())
        try :
            root = ""
            for i in tomcat_root :
                for (path, dir, files) in os.walk(i):
                    if "tomcat-users.xml" in files :
                        root = path + '\\' +'tomcat-users.xml'
                        break
            text = open(root, 'rb')
            y = text.read()
            x = y.decode('utf-8')
            text.close()
            split_line = x.splitlines()
            for j in split_line :
                if 'rolename' in j :
                    result.append(j.strip())
            for v in result:
                if v not in final:
                    final.append(v)
            result_dict['value'] = final
        except :
            result_dict['value'] = "tomcat-users.xml을 찾지 못했습니다."
    list.append(result_dict)

do_stuff()