"exec" "env" "TANIUM_SENSOR=1" "`pwd`/`if [ -f TPython/TPython ]; then echo TPython/TPython; else echo python27/python; fi`" "$0" "$@" 
import tanium
import tanium.host
import os
import re
result = []
lst = []
result_list = []
def do_stuff():
    sessionBool = False
    warnBool = False
    secBool = 2
    privilegeBool = False
    screenBool = False
    autoAdminBool = False
    os.system('secedit /export /cfg .\\test.inf')
    text = open('.\\test.inf', 'rb')
    y = text.read()
    x = y.decode('utf-16')
    text.close()
    result = x.splitlines()
    status = ""
    for x in result :
        dict = {}
        if 'ShutdownWithoutLogon' in x :
            value = x.strip().split(',')[1]
            if int(value) == 0 :
                status = "Good"
            else :
                status = "Weak"
            dict['SWV'] = 'SW4-04'
            dict['status'] = status
        
        if 'SeRemoteShutdownPrivilege' in x : 
            value = x.strip().split('*')[1]
            if value == 'S-1-5-32-544' :
                status = "Good"
            else :
                status = "Weak"
            dict['SWV'] = 'SW4-05'
            dict['status'] = status          

        if 'CrashOnAuditFail' in x : 
            value = x.strip().split(',')[1]
            if int(value) == 0 :
                status = "Good"
            else :
                status = "Weak"
            dict['SWV'] = 'SW4-06'
            dict['status'] = status 

        if 'RestrictAnonymous=' in x : 
            value = x.strip().split(',')[1]
            if int(value) == 1 :
                status = "Good"
            else :
                status = "Weak"
            dict['SWV'] = 'SW4-07'
            dict['status'] = status

        if 'AddPrinterDrivers' in x : 
            value = x.strip().split(',')[1]
            if int(value) == 1 :
                status = "Good"
            else :
                status = "Weak"
            dict['SWV'] = 'SW4-12'
            dict['status'] = status

        if 'EnableForcedLogOff' in x : 
            if sessionBool == True :
                continue
            value = x.strip().split(',')[1]
            if int(value) == 1 :
                status = "Good"
            else :
                status = "Weak"
            if status == "Weak" :
                sessionBool = True
            dict['SWV'] = 'SW4-13'
            dict['status'] = status
        if 'AutoDisconnect' in x : 
            if sessionBool == True :
                continue
            value = x.strip().split(',')[1]
            if int(value) == 15 :
                status = "Good"
            else :
                status = "Weak"
            if status == "Weak" :
                sessionBool = True
            else :
                continue
            dict['SWV'] = 'SW4-13'
            dict['status'] = status

        if 'LegalNoticeCaption' in x :        
            if warnBool == True :
                continue
            value = x.strip().split('=1,')[1]
            if value == '""' :
                status = "Weak"
            else :
                status = "Good"
            if status == "Weak" :
                warnBool = True
            dict['SWV'] = 'SW4-14'
            dict['status'] = status
        if 'LegalNoticeText' in x : 
            if warnBool == True :
                continue
            value = x.strip().split('=')[1]
            if value == '7,' :
                status = "Weak"
            else :
                status = "Good"
            if status == "Weak" :
                warnBool = True
            else :
                continue
            dict['SWV'] = 'SW4-14'
            dict['status'] = status

        if 'LmCompatibilityLevel' in x : #* 
            value = x.strip().split('=4,')[1]
            if int(value) == 3 :
                status = "Good"
            else :
                status = "Weak"
            dict['SWV'] = 'SW4-16'
            dict['status'] = status

        if 'AllocateDASD' in x : #*
            value = x.strip().split(',')[1] 
            if value == '"0"' :
                status = "Good"
            else :
                status = "Weak"
            dict['SWV'] = 'SW4-09'
            dict['status'] = status

        if 'RequireSignOrSeal' in x : 
            if secBool == 0 :
                continue
            value = x.strip().split('=4,')[1]
            if int(value) == 1 :
                status = "Good"
            else :
                status = "Weak"
            if status == "Weak" :
                secBool = 1
            else :
                continue
            dict['SWV'] = 'SW4-17'
            dict['status'] = status
        if 'SealSecureChannel' in x : 
            if secBool == 1 :
                continue
            value = x.strip().split('=4,')[1]
            if int(value) == 1 :
                status = "Good"
            else :
                status = "Weak"
            if status == "Weak" :
                secBool = 0
            else :
                continue
            dict['SWV'] = 'SW4-17'
            dict['status'] = status
        if 'SignSecureChannel' in x : 
            if secBool == 1 :
                continue
            value = x.strip().split('=4,')[1]
            if int(value) == 1 :
                status = "Good"
            else :
                status = "Weak"
            if status == "Weak" :
                secBool = 0
            dict['SWV'] = 'SW4-17'
            dict['status'] = status

        if 'ClearPageFileAtShutdown' in x : 
            value = x.strip().split('=4,')[1]
            if int(value) == 1 :
                status = "Good"
            else :
                status = "Weak"
            dict['SWV'] = 'SW4-20'
            dict['status'] = status

        if 'SeBackupPrivilege' in x : 
            if privilegeBool == True :
                continue
            value = x.strip().split('= ')[1]
            keywords = ["*S-1-1-0", "*S-1-5-32-546", "*S-1-5-32-544"]
            valueRS = any(k in value for k in keywords)
            if valueRS == False :
                status = "Good"
            else :
                status = "Weak"
            dict['SWV'] = 'SW4-24'
            dict['status'] = status
        if 'SeRestorePrivilege' in x : 
            if privilegeBool == True :
                continue
            value = x.strip().split('= ')[1]
            keywords = ["*S-1-1-0", "*S-1-5-32-546", "*S-1-5-32-544"]
            valueRS = any(k in value for k in keywords)
            if valueRS == False :
                status = "Good"
            else :
                status = "Weak"
            if status == "Weak" :
                privilegeBool = True
            else :
                continue               
            dict['SWV'] = 'SW4-24'
            dict['status'] = status

        if 'SeTakeOwnershipPrivilege' in x : 
            value = x.strip().split('= ')[1]
            if value == "*S-1-5-32-544" :
                status = "Good"
            else :
                status = "Weak"
            dict['SWV'] = 'SW4-22'
            dict['status'] = status

        if 'status' in dict :
            result_list.append(dict)

    dict = {}
    cmd = os.popen(r'reg query "HKLM\Software\Microsoft\Windows\CurrentVersion\Uninstall" ').readlines()
    path = r"HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Uninstall"
    cmdSplit = []
    for l in cmd :
        cmdSplit.append(l.split('\n')[0])
    cmdSplit = [v for v in cmdSplit if v]
    cmdSplit = [w.strip(path) for w in cmdSplit ]  
    keywords = ['{19DD1D8D-927F-45DF-ADF4-75D38267848D}']
    cmdRS = any(k in keywords for k in cmdSplit)
    if cmdRS == True :
        status = "Good"
    else :
        status = "Weak"
    dict['SWV'] = 'SW4-01'
    dict['status'] = status
    lst.append(result_list)
    result_list.append(dict)

    dict = {}
    cmd = os.popen(r'cacls %systemroot%\system32\config\SAM | find ":F"').readlines()
    cmdSplit = []
    for l in cmd :
        cmdSplit.append(l.split('\n')[0])
    cmdSplit = [w.strip('C:\\Windows\\system32\\config\\SAM') for w in cmdSplit ] 
    cmdExtract = []
    for k in range(len(cmdSplit)) :
        cmdExtract.append(re.search('\\\\(.+?):F', cmdSplit[k]).group(1))
    cmdGW = []
    for x in range(len(cmdExtract)) :
        cmdGW.append(re.sub("SYSTEM|Administrators", "", cmdExtract[x]))
    cmdRS = [v for v in cmdGW if v]
    if not cmdRS :
        status = "Good"
    if cmdRS :
        status = "Weak"  
    dict['SWV'] = 'SW4-02'
    dict['status'] = status
    lst.append(result_list)
    result_list.append(dict)
    
    dict = {}
    cmd = os.popen('reg query "HKEY_USERS\"').readlines()
    cmdExtract = [s for s in cmd if "S-1" in s]
    cmdStrip = [l.strip() for l in cmdExtract]
    cmdPath = []
    for x in range (len(cmdStrip)) :
        a = os.popen('reg query "%s\"' % cmdStrip[x]).readlines()
        b = [s for s in a if "Control Panel" in s]
        cmdPath.append(b)   
    cmdPath = sum(cmdPath, [])
    cmdPS = []
    for l in cmdPath :
        cmdPS.append(l.split('\n')[0])
    cmdDeepPath = []
    for x in range (len(cmdPS)) :        
        cmdDeepPath.append(os.popen('reg query "%s\Desktop\"' % cmdPS[x]).readlines())
    cmdSum = sum(cmdDeepPath, [])
    screenValue = [s for s in cmdSum if "ScreenSave" in s] 
    svStrip = [l.strip() for l in screenValue]
    cmdList = list(set(svStrip))
    for r in range(len(cmdList)) :
        if 'ScreenSaverIsSecure' in cmdList[r] :
            if screenBool == True :
                continue
            cmdRS = re.sub(r'[^0-9]', '', cmdList[r])
            if cmdRS == '1' :
                status = "Good"
            else :
                status = "Weak"
            if status == "Weak" :
                screenBool = True
            else :
                continue  
            dict['SWV'] = 'SW4-03'
            dict['status'] = status  
        if 'ScreenSaveActive' in cmdList[r] :
            if screenBool == True :
                continue
            cmdRS = re.sub(r'[^0-9]', '', cmdList[r])
            if cmdRS == '1' :
                status = "Good"
            else :
                status = "Weak"
            if status == "Weak" :
                screenBool = True
            else :
                continue 
            dict['SWV'] = 'SW4-03'
            dict['status'] = status 
        if 'ScreenSaveTimeOut' in cmdList[r] :
            if screenBool == True :
                continue
            cmdRS = re.sub(r'[^0-9]', '', cmdList[r])
            if int(cmdRS) <= 600 : # 단위 초
                status = "Good"
            else :
                status = "Weak"
    dict['SWV'] = 'SW4-03'
    dict['status'] = status 
    lst.append(result_list)
    result_list.append(dict)

    dict = {}
    cmd=os.popen('reg query "HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon" | find /I "AutoAdminLogon"').readlines()
    cmdSplit = []
    for l in cmd :
        cmdSplit.append(l.split('\n')[0])
    cmdString = ' '.join(s for s in cmdSplit)
    if not cmd :
        status = "Weak"
    else : 
        cmdNum = re.sub(r'[^0-9]', '', cmdString)
        if int(cmdNum) == 0:
            status = "Good"
        else : 
            status = "Weak"
    dict['SWV'] = 'SW4-08'
    dict['status'] = status 
    lst.append(result_list)
    result_list.append(dict)

    dict={}
    cmd= os.popen('manage-bde -status').readlines()
    cmdSplit = []
    for l in cmd :
        cmdSplit.append(l.split('\n')[0])
    cmdSplit = [v for v in cmdSplit if v]
    cmdExtract = [x for x in cmdSplit if 'BitLocker 버전:' in x]
    cmdString = ' '.join(s for s in cmdExtract)
    if "없음" in cmdString :
        status = "Weak"
    else :
        status = "Good"
    dict['SWV'] = 'SW4-10'
    dict['status'] = status 
    lst.append(result_list)
    result_list.append(dict)

    dict={}
    cmd=os.popen('reg query "HKLM\System\CurrentControlSet\Services\Tcpip\Parameters"').readlines()
    cmdSplit=[]
    for line in cmd :
        cmdSplit.append(line.split('\n')[0])
    cmdSplit = [v for v in cmdSplit if v]
    cmdnotIn = [x for x in cmdSplit if '\\CurrentControlSet' not in x]
    def all_exist(avalue, bvalue):
        return all(any(x in y for y in bvalue) for x in avalue)       
    keywords=["NoNameReleaseOnDemand", "EnableDeadGWDetect", "SynAttackProtect", "KeepAliveTime"]
    cmdTF = all_exist(keywords, cmdnotIn)
    cmdList =[]
    if cmdTF == False :
        status = "Weak"
    else :
        for x in cmdnotIn:          
            if "NoNameReleaseOnDemand" in x:
                cmdRS = x.strip("    NoNameReleaseOnDemand    REG_DWORD    0x")
                if int(cmdRS) == 1 :
                    cmdGW = "Good"
                else :
                    cmdGW = "Weak"
                cmdList.append(cmdGW)
            if "EnableDeadGWDetect" in x:
                cmdRS = x.strip("    EnableDeadGWDetect    REG_DWORD    ")
                if cmdRS == "0x0" :
                    cmdGW = "Good"
                else :
                    cmdGW = "Weak"
                cmdList.append(cmdGW)
            if "SynAttackProtect" in x:
                cmdRS = x.strip("    SynAttackProtect    REG_DWORD    0x")
                if int(cmdRS) >= 1 :
                    cmdGW = "Good"
                else :
                    cmdGW = "Weak"
                cmdList.append(cmdGW)
            if "KeepAliveTime" in x:
                cmdRS = x.strip("    KeepAliveTime    REG_DWORD    0x")
                if cmdRS == "493" :
                    cmdGW = "Good"
                else :
                    cmdGW = "Weak"  
                cmdList.append(cmdGW)
        if 'Weak' in cmdList :
            status = "Weak"
        else :
            status = "Good"   
    dict['SWV'] = 'SW4-11'
    dict['status'] = status 
    lst.append(result_list)
    result_list.append(dict)

    dict={}
    cmd=os.popen(r'cacls C:\Users\* | find /v "파일을 처리했으며"').read()
    cmdSplit = cmd.split('C:\\')
    cmdSplit = [v for v in cmdSplit if v]
    cmdNotAll = [x for x in cmdSplit if 'Users\\All Users' not in x]
    cmdNotDef = [x for x in cmdNotAll if 'Users\\Default User' not in x]
    cmdRS = all(any(x in y for y in cmdNotDef) for x in ["Everyone"])
    if cmdRS : 
        status = "Weak"
    else : 
        status = "Good"
    dict['SWV'] = 'SW4-15'
    dict['status'] = status 
    lst.append(result_list)
    result_list.append(dict)

    dict={}
    cmd = os.popen('fsutil fsinfo volumeinfo c:| find /I "파일 시스템"').read()
    if 'NTFS' in cmd :
        status = "Good"
    else :
        status = "Weak"
    dict['SWV'] = 'SW4-18'
    dict['status'] = status 
    lst.append(result_list)
    result_list.append(dict)   

    dict = {}
    cmd= os.popen('reg query "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run"').readlines()
    cmdAdd= cmd + os.popen('reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run"').readlines()
    cmdList= cmdAdd + os.popen('reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Run"').readlines()
    cmdSplit = []
    for l in cmdList :
        cmdSplit.append(l.split('\n')[0])
    cmdSplit = [v for v in cmdSplit if v]
    cmdNotIn = [x for x in cmdSplit if 'CurrentVersion' not in x]
    cmdExtract = []
    for l in range(len(cmdNotIn)):
        cmdSplReg = cmdNotIn[l].split('    REG_')[0]
        cmdExtract.append(cmdSplReg.split('    ')[1])
    def any_exist(avalue, bvalue):
        return any(any(x in y for y in bvalue) for x in avalue)  
    keywords=["Downloaded Maps Manager", "Geolocation Service", "IP Helper", "Phone Service", "Sensor Service", "SysMain", "Superfetch", "Windows Biometric Service", "Windows Search"]
    cmdRS = any_exist(keywords, cmdExtract)
    if cmdRS :
        status = "Weak"
    else :
        status = "Good"
    dict['SWV'] = 'SW4-19'
    dict['status'] = status 
    lst.append(result_list)
    result_list.append(dict)   
  
    dict={}
    cmd = os.popen('schtasks').readlines()
    cmdExtract=[]
    for i in range(len(cmd)) :
        if "=" not in cmd[i] and "다음 실행 시간" not in cmd[i] and "폴더" not in cmd[i] and "준비" not in cmd[i] and "정보" not in cmd[i]:
            cmdExtract.append(cmd[i])
    cmdReplace = []
    for k in cmdExtract :
        tmp = k.replace("\n","")
        cmdReplace.append(tmp)
    cmdReplace = [v for v in cmdReplace if v]
    cmdSplit = []
    for l in cmdReplace :
        cmdSplit.append(l.split('N/A')[0])
    keywords=["Microsoft Compatibility Appraiser", "ProgramDataUpdater", "StartupAppTask", "Proxy", "Consolidator", "UsbCeip", "RecommendedTroubleshootingScanner", "Scheduled", "Microsoft-Windows-DiskDiagnosticDataCollector", "Microsoft-Windows-DiskDiagnosticResolver", "WinSAT", "AnalyzeSystem", "XblGameSaveTask"]
    cmdRS = any_exist(keywords, cmdSplit)
    if cmdRS :
        status = "Weak"
    else :
        status = "Good"
    dict['SWV'] = 'SW4-21'
    dict['status'] = status 
    lst.append(result_list)
    result_list.append(dict)       

    dict = {}
    cmd= os.popen('netsh advfirewall firewall show rule name="TaniumClient.exe"').readlines()
    cmdSplit = []
    for line in cmd :
        cmdSplit.append(line.split('\n')[0])
    cmdSplit = [v for v in cmdSplit if v]
    cmdExtract = [x for x in cmdSplit if 'LocalPort' in x]
    cmdJoin = ''.join(cmdExtract)
    cmdRS = cmdJoin.split('LocalPort:                            ')[1]
    if cmdRS == '17472' :
        status = "Good"
    else :
        status = "Weak"
    dict['SWV'] = 'SW4-23'
    dict['status'] = status 
    lst.append(result_list)
    result_list.append(dict)         
    tanium.results.add(result_list)
try:
	do_stuff()
except Exception as e:
	tanium.results.add("ERROR executing sensor : {}".format(e))

