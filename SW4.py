"exec" "env" "TANIUM_SENSOR=1" "`pwd`/`if [ -f TPython/TPython ]; then echo TPython/TPython; else echo python27/python; fi`" "$0" "$@"
import os
from pprint import pprint
result = []
list = []
def do_stuff():
    os.system('secedit /export /cfg .\\test.inf')
    text = open('.\\test.inf', 'rb')
    y = text.read()
    x = y.decode('utf-16')
    text.close()
    result = x.splitlines()

    for x in result :
    #[SW4-09] 이동식 미디어 포맷 및 꺼내기 허용
        if 'AllocateDASD' in x : # 로컬 정책 > 보안 옵션 > "이동식 미디어 포맷 및 꺼내기 허용" 정책, 값이 없을 경우 "취약"
            list.append(x)
    #[SW4-04] 로그온하지 않고 시스템 종료 허용   사용-4,1   사용안함-4,0
        if 'ShutdownWithoutLogon' in x : # 로컬 정책> 보안 옵션 > "로그온 하지 않고 시스템 종료 허용" 정책
            list.append(x)
    #[SW4-05] 원격 시스템에서 강제로 시스템 종료 
        if 'SeRemoteShutdownPrivilege' in x : # 로컬 정책> 사용자 권한 할당 > "원격 시스템에서 강제 종료" 정책, *S-1-5-32-544(Administrators의 SID) 외에 다른 값 있을 경우 "취약"
            list.append(x)
    #[SW4-06] 보안 감사를 로그할 수 없는 경우 즉시 시스템 종료
        if 'CrashOnAuditFail' in x : # 로컬 정책 > 보안 옵션 > "보안 감사를 로그할 수 없는 경우 즉시 시스템 종료" 정책, 값이 4,0일 경우(사용안함) "양호"
            list.append(x)
    #[SW4-12] 사용자가 프린터 드라이버를 설치할 수 없게 함
        if 'AddPrinterDrivers' in x : # 로컬 정책 > 보안 옵션 > "사용자가 프린터 드라이버를 설치할 수 없게 함" 정책, 값이 4,1일 경우(사용) 양호, 4,0일 경우(사용안함) 취약
            list.append(x)
    #[SW4-13] 세션 연결을 중단하기 전에 필요한 유휴시간 (EnableForcedLogOff와 AutoDisconnect 둘 다 '양호'를 만족해야 함.)
        if 'EnableForcedLogOff' in x : # 로컬 정책 > 보안 옵션 > "로그온 시간이 만료되면 클라이언트 연결 끊기" 정책, 값이 4,1일 경우(사용) 양호, 4,0일 경우(사용안함) 취약
            list.append(x)
        if 'AutoDisconnect' in x : # 로컬 정책 > 보안 옵션 > "세션을 중단하기 전에 필요한 유휴 시간" 정책, 값이 4,15일 경우(15분) 양호, 그 외는 취약
            list.append(x)
    #[SW4-16] LAN Manager 인증 수준
        if 'LmCompatibilityLevel' in x : # 로컬 정책 > 보안 옵션 > "LAN Manager 인증 수준 속성" 정책, 값이 4,3일 경우(NTLMv2응답만 보내기) 양호 / 4,0 4,1 4,2 일 경우 취약, 'LmCompatibilityLevel' 자체가 없을 경우 취약
            list.append(x)
    #[SW4-17] 보안 채널 데이터 디지털 암호화 또는 서명(RequireSignOrSeal, SealSecureChannel, SignSecureChannel 셋 다 값이 4,1을 만족해야 함.)
        if 'RequireSignOrSeal' in x : # 로컬 정책 > 보안 옵션 > "보안 채널 데이터를 디지털 암호화 또는, 서명(항상)" 정책, 값이 4,1일 경우(사용) 양호 / 4,0(사용 안 함)일 경우 취약
            list.append(x)
        if 'SealSecureChannel' in x : # 로컬 정책 > 보안 옵션 > "보안 채널 데이터를 디지털 암호화(가능한 경우)", 값이 4,1일 경우(사용) 양호 / 4,0(사용 안 함)일 경우 취약
            list.append(x)
        if 'SignSecureChannel' in x : # 로컬 정책 > 보안 옵션 > "보안 채널 데이터 디지털 서명(가능한 경우)" 정책, 값이 4,1일 경우(사용) 양호 / 4,0(사용 안 함)일 경우 취약
            list.append(x)
    #[SW4-14] 경고 메시지 설정(LegalNoticeCaption와 LegalNoticeText 둘 다 '양호'를 만족해야 함.)
        if 'LegalNoticeCaption' in x : # 로컬 정책 > 보안 옵션 > "로그온을 시도하는 사용자에 대한 메시지 제목", 값이 1,"제목내용값"일 경우(내용o) 양호 / 값이 1,""밖에 없을 경우(내용x) 취약
            list.append(x)
        if 'LegalNoticeText' in x : # 로컬 정책 > 보안 옵션 > "로그온을 시도하는 사용자에 대한 메시지 텍스트", 값이 7,텍스트내용값일 경우(내용o) 양호 / 값이 7,밖에 없을 경우(내용x) 취약
            list.append(x)
    #[SW4-20] 페이징 파일 관리
        if 'ClearPageFileAtShutdown' in x : # 로컬 정책 > 보안 옵션 > "가상 메모리 페이지 파일 지움", 값이 4, 1일 경우(사용) 양호 / 값이 4,0일 경우(사용 안 함) 취약
            list.append(x)
    #[SW4-24] 백업 및 복구 권한 설정 미흡(SeBackupPrivilege와 SeRestorePrivilege 둘 다 '양호'를 만족해야 함.)
        if 'SeBackupPrivilege' in x : # 로컬 정책 > 사용자 권한 할당 > "파일 및 디렉터리 백업", 값이 *S-1-1-0(Everyone그룹)이나 *S-1-5-32-546(Guests그룹)이나 *S-1-5-32-545(Users그룹)중 하나라도 있을 경우(취약)
            list.append(x)
        if 'SeRestorePrivilege' in x : # 로컬 정책 > 사용자 권한 할당 > "파일 및 디렉터리 복원", 값이 *S-1-1-0(Everyone그룹)이나 *S-1-5-32-546(Guests그룹)이나 *S-1-5-32-545(Users그룹)중 하나라도 있을 경우(취약)
            list.append(x)
    #[SW4-07] SAM 계정과 공유의 익명 열거 허용 안 함
        if 'RestrictAnonymous' in x : # 로컬 정책 > 보안 옵션 > "SAM 계정과 공유의 익명 열거 허용 안함", 값이 4, 1일 경우(사용) 양호 / 값이 4,0일 경우(사용 안 함) 취약
            #RestrictAnonymousSAM : "SAM 계정의 익명 열거 허용 안 함", 값이 4, 1일 경우(사용) 양호 / 값이 4,0일 경우(사용 안 함) 취약
            list.append(x)
    #[SW4-22] 일반 사용자의 시스템 자원 소유권 변경 권한 설정 미비
        if 'SeTakeOwnershipPrivilege' in x : # 로컬 정책 > 사용자 권한 할당 > "파일 또는 기타 개체의 소유권 가져오기", 값이 *S-1-5-32-544(Administrators) 외에 다른 값이 있을 경우 취약
            list.append(x)

    #[SW4-02] SAM 파일 접근 통제 설정/ SYSTEM:F, Administrators:F 외 다른 :F가 있는 경우 취약
    SW402cmd = os.popen(r'cacls %systemroot%\system32\config\SAM').readlines()
    SW402 = []
    for line in SW402cmd :
        SW402.append(line.split('\n')[0])
    list.append(SW402)

    #[SW4-08] Autologon 기능 제어
    # 값이 없거나 0x0으로 설정되어 있는 경우 양호 / 값이 1로 설정되어 있는 경우 취약
    SW408=os.popen('reg query "HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon" | find /I "AutoAdminLogon"').readlines()
    list.append(SW408)

    #[SW4-01] 백신 프로그램 설치
    SW401=os.popen(r'reg query "HKLM\Software\Microsoft\Windows\CurrentVersion\Uninstall" ').read()
    list.append(SW401)

    #[SW4-19] 시작프로그램 목록 분석
    SW419A= os.popen('reg query "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run"').readlines()
    SW419B= SW419A + os.popen('reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run"').readlines()
    SW419= SW419B + os.popen('reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Run"').readlines()
    SW419C = []
    for line in SW419 :
        SW419C.append(line.split('\n')[0])
    SW419C = [v for v in SW419C if v]
    SW419D = [x for x in SW419C if 'CurrentVersion' not in x]
    list.append(SW419D)

    #[SW4-03] 화면보호기 설정 
    run_list = os.popen('reg query "HKEY_USERS"').readlines()
    SID  = [s for s in run_list if "S-1" in s]
    SID_strip = [l.strip() for l in SID]
    SID_dir = []
    for x in range (len(SID_strip)) :
        SID_dir.append(os.popen('reg query "%s\Control Panel\Desktop\"' % SID_strip[x]).readlines())
    dir_sum = sum(SID_dir, [])
    screen_value = [s for s in dir_sum if "ScreenSave" in s]
    sv_strip = [l.strip() for l in screen_value]
    SW403 = []
    for i in sv_strip:
        if i not in list:
            SW403.append(i)
    list.append(SW403)

    #[SW4-02] SAM 파일 접근 통제 설정/ SYSTEM:F, Administrators:F 외 다른 :F가 있는 경우 취약
    SW402=os.popen(r'cacls %systemroot%\system32\config\SAM').read()
    list.append(SW402)

    #[SW4-08] Autologon 기능 제어
    # 값이 없거나 0x0으로 설정되어 있는 경우 양호 / 값이 1로 설정되어 있는 경우 취약
    SW408=os.popen('reg query "HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon" | find /I "AutoAdminLogon"').readlines()
    list.append(SW408)

    #[SW4-01] 백신 프로그램 설치
    SW401=os.popen(r'reg query "HKLM\Software\Microsoft\Windows\CurrentVersion\Uninstall" ').read()
    list.append(SW401)

    #[SW4-15] 사용자별 홈 디렉터리 권한 설정/ 계정별 홈 디렉터리의 권한 조회
    SW415cmd=os.popen(r'cacls C:\Users\* | find /v "파일을 처리했으며"').read()
    SW415split = SW415cmd.split('C:\\')
    SW415none = [v for v in SW415split if v]
    SW415notInAll = [x for x in SW415none if 'Users\\All Users' not in x]
    SW415notInDefault = [x for x in SW415notInAll if 'Users\\Default User' not in x]
    SW415TF = all(any(x in y for y in SW415notInDefault) for x in ["Everyone"])
    SW415 = []
    if SW415TF == True : 
        SW415.append("[SW4-15] 사용자별 홈 디렉터리 권한 설정/ 계정별 홈 디렉터리의 권한 조회:취약")
    else : 
        SW415.append("[SW4-15] 사용자별 홈 디렉터리 권한 설정/ 계정별 홈 디렉터리의 권한 조회:양호")
    list.append(SW415)

    #[SW2-19] FTP 서비스 구동 점검
    SW219cmd = os.popen('net start | find "Microsoft FTP Service"')
    dict = {}
    SW219 = []
    for line in SW219cmd :
        nline = line.split('\n')[0]
        if "SERVICE_NAME" in nline :
            dict['SERVICE_NAME'] = nline.split(':')[1].strip()
        elif "DISPLAY_NAME" in nline :
            dict['DISPLAY_NAME'] = nline.split(':')[1].strip()
        elif "종류" in nline :
            dict["TYPE"] = nline.split(':')[1].strip()
        elif "상태" in nline :
            dict['STATUS'] = nline.split(':')[1]
            SW219.append(dict)
            dict = {}
    list.append(SW219)

    #[SW4-18] 파일 및 디렉토리 보호
    fileSystemCD = os.popen('fsutil fsinfo volumeinfo c:| find /I "파일 시스템"').read()
    fileSystemDD = os.popen('fsutil fsinfo volumeinfo d:| find /I "파일 시스템"').read()
    fileSystemED = os.popen('fsutil fsinfo volumeinfo e:| find /I "파일 시스템"').read()
    fileSystemFD = os.popen('fsutil fsinfo volumeinfo f:| find /I "파일 시스템"').read()
    fileSystem = fileSystemCD+fileSystemDD+fileSystemED+fileSystemFD
    list.append(fileSystem)

    #[SW4-10] 디스크볼륨 암호화 설정 - BitLocker 버전: '없음'이면 취약, 예외 : 해당 서버가 IDC와 같이 물리적으로 보호된 장소에 있을경우 또는 하드디스크 교체 시 기존 하드디스크의 디가우징 또는 천공 등 폐기 관련 규정 수행 시
    SW410cmd= os.popen('manage-bde -status').readlines()
    SW410s = []
    for line in SW410cmd :
        SW410s.append(line.split('\n')[0])
    SW410s = [v for v in SW410s if v]
    SW419 = [x for x in SW410s if 'BitLocker 버전:' in x]
    list.append(SW419)

    #[SW4-23] 서비스 접근 IP 및 포트 제한 미비, LocalPort: '17472' 외의 포트번호 있으면 '취약'
    SW423cmd= os.popen('netsh advfirewall firewall show rule name="TaniumClient.exe"').readlines()
    SW423s = []
    for line in SW423cmd :
        SW423s.append(line.split('\n')[0])
    SW423s = [v for v in SW423s if v]
    SW423 = [x for x in SW423s if 'LocalPort' in x]
    list.append(SW423)

    print(list)


try:
    do_stuff()
except Exception as e:
    print("ERROR executing sensor : {}".format(e))
